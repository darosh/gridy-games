import { equal } from 'assert';
import { IGrid, Rectangular8Tile, RectangularGrid, Shape } from 'gridy';
import { BaseGame, GomokuGame, TicTacToeGame } from '../../src/games';
import { MonteCarloPlayer } from '../../src/players/MonteCarloPlayer';
import { playout } from '../../src/utils';

describe('MonteCarloPlayer', () => {
  it('should favor the winning move in TicTacToeGame', () => {
    const game = new TicTacToeGame();
    const player = new MonteCarloPlayer(1000);
    game.init('b1c1b2c2');
    expect(player.select(game)).toEqual({ data: null, x: 1, y: 2 });
  });

  it('should block the winning move in TicTacToeGame', () => {
    const game = new TicTacToeGame();
    const player = new MonteCarloPlayer(1000);
    game.init('a1a2b2a3');
    expect(player.select(game)).toEqual({ data: null, x: 2, y: 2 });
  });

  it('should finish TicTacToeGame', () => {
    const game = new TicTacToeGame();
    const player = new MonteCarloPlayer(25);
    playout(game, [player]);
    expect(game.moves.length).toBeGreaterThan(4);
    expect(game.possible().length).toEqual(0);
    // expect(game.winner()).toEqual(1)
  });

  it('should finish GomokuGame', () => {
    const game = new GomokuGame();
    const player = new MonteCarloPlayer(25);
    playout(game, [player]);
    expect(game.moves.length).toBeGreaterThan(80);
    expect(game.possible().length).toEqual(0);
    // expect(game.winner()).toEqual(1)
  });
});
